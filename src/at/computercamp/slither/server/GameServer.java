package at.computercamp.slither.server;

import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;

public class GameServer {

	private int listenPort = 12345;
	private Paul controller = new Paul();
	private Networking networking;
	private List<Client> clients = new ArrayList<Client>();
	private List<Client> clientsToRemove = new ArrayList<Client>();
	private String gameStateJson;
	private Gson gson = new Gson();

	private GameServer() {}
	
	public void init() {
		networking = new Networking(listenPort);
		networking.start();
		while (true) {
			long startTime = System.currentTimeMillis();
			loop();
			// sleep for 100 - the duration of loop()
			//System.out.println(startTime);
			//System.out.println(System.currentTimeMillis() - startTime);
			try {
				Thread.sleep(100);
				//Thread.sleep(100 - (System.currentTimeMillis() - startTime));
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	// GameServer Singleton

	private static GameServer instance;

	public static GameServer getInstance() {
		if (instance == null)
			instance = new GameServer();
		return instance;
	}

	// main loop

	public void loop() {

		for (Client client : clients) {
			sendDataToClient(client);
			if (!client.isOnline()) {
				clientsToRemove.add(client);
				client.getSnake().die();
			}
		}
		
		for (Client client : clientsToRemove) {
			clients.remove(client);
		}
		
		controller.tick();
		
		clientsToRemove.clear();

		// wipe gameStateJson
		// it will be regenerated by sendDataToClient
		gameStateJson = null;
	}

	// network stuff

	// serialize the gs and send it to the client
	public void sendDataToClient(Client client) {
		if (gameStateJson == null)
			gameStateJson = gson.toJson(controller.getGameState());

		networking.sendData(((InetSocketAddress) client.getSocketAddress()).getAddress(), ((InetSocketAddress) client.getSocketAddress()).getPort(), gameStateJson);
	}

	public Paul getController() {
		return controller;
	}

	public void handleClientAction(String clientActionJson, SocketAddress socketAddress) {
		ClientAction action = gson.fromJson(clientActionJson, ClientAction.class);

		Snake snake = null;

		// TODO: maybe replace List<client> with hashhmap to make lookup faster
		for (Client client : clients) {
			if (client.getSnake().getName().equals(action.getName())) {
				snake = client.getSnake();
				break;
			}
		}

		if (snake == null) {
			snake = controller.addSnake(action.getName());
			clients.add(new Client(socketAddress, snake));
		}

		controller.handleClientAction(action, snake);
	}
}
